apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "phoenix-alerts.fullname" . }}-backend
  labels:
    {{- include "phoenix-alerts.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "phoenix-alerts.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "phoenix-alerts.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.backend.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-backend
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.config.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: PORT
              value: "{{ .Values.backend.config.port }}"
            - name: LOG_LEVEL
              value: "{{ .Values.backend.config.logLevel }}"
            - name: LLM_PROVIDER
              value: "{{ .Values.llm.provider }}"
            {{- if .Values.llm.selectedModel }}
            - name: LLM_MODEL
              value: "{{ .Values.llm.selectedModel }}"
            {{- else }}
            - name: LLM_MODEL
              value: "{{ index .Values.llm.models .Values.llm.provider "default" }}"
            {{- end }}
            
            # MongoDB URI
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.mongodb }}
                  name: {{ .Values.secrets.existingSecrets.mongodb }}
                  key: mongodb-uri
                  {{- else if .Values.mongodb.enabled }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: mongodb-uri
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: mongodb-uri
                  {{- end }}
            
            # OpenAI API Key
            {{- if eq .Values.llm.provider "openai" }}
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.openAi }}
                  name: {{ .Values.secrets.existingSecrets.openAi }}
                  key: api-key
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: openai-api-key
                  {{- end }}
            {{- end }}
            
            # Anthropic API Key
            {{- if eq .Values.llm.provider "anthropic" }}
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.anthropic }}
                  name: {{ .Values.secrets.existingSecrets.anthropic }}
                  key: api-key
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: anthropic-api-key
                  {{- end }}
            {{- end }}
            
            # Azure OpenAI API Key and Endpoint
            {{- if eq .Values.llm.provider "azure" }}
            - name: AZURE_OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.azureOpenAi }}
                  name: {{ .Values.secrets.existingSecrets.azureOpenAi }}
                  key: api-key
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: azure-openai-api-key
                  {{- end }}
            - name: AZURE_OPENAI_ENDPOINT
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.azureOpenAi }}
                  name: {{ .Values.secrets.existingSecrets.azureOpenAi }}
                  key: endpoint
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: azure-openai-endpoint
                  {{- end }}
            {{- end }}
            
            # Hugging Face API Key
            {{- if eq .Values.llm.provider "huggingface" }}
            - name: HUGGINGFACE_API_KEY
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.huggingFace }}
                  name: {{ .Values.secrets.existingSecrets.huggingFace }}
                  key: api-key
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: huggingface-api-key
                  {{- end }}
            {{- end }}
            
            # Ollama Configuration
            {{- if eq .Values.llm.provider "ollama" }}
            - name: OLLAMA_BASE_URL
              value: "http://{{ include "phoenix-alerts.fullname" . }}-ollama:{{ .Values.ollama.service.port }}"
            {{- end }}
            
            # Slack Webhook URL
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.secrets.useExisting .Values.secrets.existingSecrets.slack }}
                  name: {{ .Values.secrets.existingSecrets.slack }}
                  key: webhook-url
                  {{- else }}
                  name: {{ include "phoenix-alerts.fullname" . }}
                  key: slack-webhook-url
                  {{- end }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "phoenix-alerts.fullname" . }}-frontend
  labels:
    {{- include "phoenix-alerts.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "phoenix-alerts.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "phoenix-alerts.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.frontend.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-frontend
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.frontend.config.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: API_BASE_URL
              value: "{{ .Values.frontend.config.apiBaseUrl }}"
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}